#Scenerio:
#Suppose I want convert S3 CSV file to parquet  format and stored in S3 By using Glue Crawler & Glue job .
#Make a Step Functions Accordingly

Step 1: open AWS Step Functions
--------
Create a crawler : mycrawler23

Step 2: Drag Strat Crawler and Get Crawler
--------
Start crawler and get crawler state in Step Function

Step 3:
--------
Inspect the Json of GetCrawler component to build the if-else condition

Step 4:
--------
Create a waiter block

Step 5:
--------
Add the Glue Run Job component (Below code)--
(Configure the block as synchronous component i.e. call the service, and have Step Functions wait for a job to complete)

# Enter A Following Code in Glue Job

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "rahuldb", table_name = "newdata", transformation_ctx = "datasource0")

datasink4 = glueContext.write_dynamic_frame.from_options(frame = datasource0, connection_type = "s3", 
connection_options = {"path": "s3://abcd125/bank/"}, format = "parquet", transformation_ctx = "datasink4")
job.commit()


# you can Directly use following Step Functions json Code instaed of doing All Above Steps:

Reusable Step Function Json:
-------------------------------

{
  "Comment": "A description of my state machine",
  "StartAt": "StartCrawler",
  "States": {
    "StartCrawler": {
      "Type": "Task",
      "Parameters": {
        "Name": "mycrawler23"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Next": "GetCrawler"
    },
    "GetCrawler": {
      "Type": "Task",
      "Parameters": {
        "Name": "mycrawler23"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler",
      "Next": "Choice"
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Crawler.State",
          "StringEquals": "RUNNING",
          "Next": "Wait"
        }
      ],
      "Default": "Glue StartJobRun"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "GetCrawler"
    },
    "Glue StartJobRun": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "gluejob_23"
      },
      "End": true
    }
  }
}
